pipeline {
    agent {
        label 'maven'
    }
    options {
        disableConcurrentBuilds()
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }

    stages {
        stage('build') {
            steps {
                container('maven') {
                    echo 'Cloning the repository and building the project...'
                    sh '''
                        # insrall tar
                        apt-get update
                        apt-get install -y tar
                        # Clone the repository
                        git clone https://github.com/AbdElRhmanArafa/java-base-appliction.git
                        # Navigate to the project directory
                        cd java-base-appliction
                        # Run Maven clean and package
                        mvn clean package
                    '''
                }
            }
        }
        stage('static analysis') {
            steps {
                container('maven') {
                    echo 'Running SonarQube analysis...'
                    dir('java-base-appliction') {
                        withSonarQubeEnv('sq1') {
                            sh '''
                                # Run SonarQube analysis
                                mvn sonar:sonar -Dsonar.projectKey=java-base-appliction
                            '''
                        }
                    }
                }
            }
        }
        stage('quality gate') {
            steps {
                container('maven') {
                    echo 'Waiting for SonarQube quality gate...'
                    timeout(time: 1, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        stage('artifact') {
            steps {
                container('maven') {
                    echo 'Archiving the artifact...'
                    dir('java-base-appliction') {
                        sh 'cp Dockerfile target/'
                        sh 'tar -czf target.tar.gz target'
                        archiveArtifacts artifacts: 'target.tar.gz', fingerprint: true
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Triggering the next pipeline...'
            build job: 'Dockerize', wait: false, parameters: [
                string(name: 'jobName', value: env.JOB_NAME),
                string(name: 'buildNumber', value: env.BUILD_NUMBER),
                string(name: 'artifactName', value: 'target.tar.gz')
            ]
        }
    }
}
